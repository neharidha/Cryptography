!pip install pycryptodome
import hashlib
##working part2
ef verify_hash(temp):
return (hashlib.md5(plain1).digest() == hashlib.md5(temp).digest() and plain1 != temp)

def hash_collision(plain2):
try_hash = list(plain2)
for i in range(256):
  for j in range(256):
    for k in range(256):
      try_hash[19] = i
      try_hash[45] = j
      try_hash[59] = k
      new_hash = bytes(try_hash)
      
      if verify_hash(new_hash):
        return new_hash
          
      try_hash[19] = plain2[19]
      try_hash[45] = plain2[45]
      try_hash[59] = plain2[59]
return False

if __name__ == "__main__":
plain1 = b'\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\
xca\xb5\x87\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\
xf4\xb3\x02\x83\xe4\x88\x83\x25\x71\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\
x1d\xbd\xf2\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\
xc9\x19\xc6\xdd\x53\xe2\xb4\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\
x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\xa8\x0d\x1e\xc6\x98\x21\xbc\xb6\
xa8\x83\x93\x96\xf9\x65\x2b\x6f\xf7\x2a\x70'
plain2 = b'\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\
xca\xb5\x00\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\
xf4\xb3\x02\x83\xe4\x88\x83\x25\x00\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\
x1d\xbd\x72\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\
xc9\x19\xc6\xdd\x53\xe2\x34\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\
x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\x28\x0d\x1e\xc6\x98\x21\xbc\xb6\
xa8\x83\x93\x96\xf9\x65\xab\x6f\xf7\x2a\x70'

collision = hash_collision(plain2)
if collision:
  print("Collision found: ", collision)
else:
  print("No collision found.")
