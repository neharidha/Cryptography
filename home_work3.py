# -*- coding: utf-8 -*-
"""homework3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SGHkDv--_2jfVgae7T6k_g_k_6PjGgzY
"""

!pip install pycryptodome


from Crypto.Cipher import DES
from Crypto.Cipher import AES

UID = 118552804
Last_Name = 'Murali'
first_Name = 'Neharidha'

##des input


def des_input_av_test(plaintext, key, flip_bits):
    cipher = DES.new(key, DES.MODE_ECB)
    originalcipher = cipher.encrypt(plaintext)
    
    results = []
    
    for bit_position in flip_bits:
        newinput = bytearray(plaintext)
        newinput[bit_position // 8] ^= 1 << (7 - bit_position % 8)
        
        newcipher = cipher.encrypt(bytes(newinput))

        num_bit_diff = sum(bin(a ^ b).count('1') for a, b in zip(originalcipher, newcipher))
        results.append(num_bit_diff)
    return results





##des key


def des_key_av_test(plaintext, key, flip_bits):
    cipher = DES.new(key, DES.MODE_ECB)
    originalcipher = cipher.encrypt(plaintext)
    results = []
    kcipher = DES.new(key, DES.MODE_ECB)
    for bit_position in flip_bits:
        newkey = bytearray(key)
        newkey[bit_position // 8] ^= 1 << (7 - bit_position % 8)
        mkcipher = DES.new(bytes(newkey), DES.MODE_ECB)
        newcipher = mkcipher.encrypt(plaintext)
        num_bit_diff = sum(bin(a ^ b).count('1') for a, b in zip(originalcipher, newcipher))
        results.append(num_bit_diff)
    return results




#AES 


def aes_input_av_test(plaintext, key, flip_bits):
    cipher = AES.new(key, AES.MODE_ECB)
    originalcipher = cipher.encrypt(plaintext)
    results = []
    for bit_position in flip_bits:
        new_plaintext = bytearray(plaintext)
        new_plaintext[bit_position // 8] ^= 1 << (7 - bit_position % 8)
        newcipher = cipher.encrypt(bytes(new_plaintext))
        num_bit_diff = sum(bin(a ^ b).count('1') for a, b in zip(originalcipher, newcipher))
        results.append(num_bit_diff)
    return results




##aes key


def aes_key_av_test(plaintext, key, flip_bits):
    cipher = AES.new(key, AES.MODE_ECB)
    originalcipher = cipher.encrypt(plaintext)
    results = []
    kcipher = AES.new(key, AES.MODE_ECB)
    for bit_position in flip_bits:
        newkey = bytearray(key)
        newkey[bit_position // 8] ^= 1 << (7 - bit_position % 8)
        mkcipher = AES.new(bytes(newkey), AES.MODE_ECB)
        newcipher = mkcipher.encrypt(plaintext)
        num_bit_diff = sum(bin(a ^ b).count('1') for a, b in zip(originalcipher, newcipher))
        results.append(num_bit_diff)
    return results




if __name__ == "__main__":
  des_input_result = des_input_av_test(b'thisoneis16bytes',b'deskey!!',[3, 25, 36])
  print(des_input_result)
  des_key_result = des_key_av_test(b'thisoneis16bytes', b'deskey!!', [3, 25, 36])
  print(des_key_result)
  aes_input_result = aes_input_av_test(b'thisoneis16bytes', b'veryverylongkey!', [5, 29, 38])
  print(aes_input_result)
  aes_key_result = aes_key_av_test(b'thisoneis16bytes', b'veryverylongkey!', [5, 29, 38])
  print(aes_key_result)